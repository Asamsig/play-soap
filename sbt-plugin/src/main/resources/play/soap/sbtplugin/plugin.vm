##
## Copyright Â© 2015 Typesafe, Inc. All rights reserved.
## No information contained herein may be reproduced or transmitted in any form or
## by any means without the express written permission of Typesafe, Inc.
##
package $service.packageName

import javax.xml.namespace.QName
import javax.xml.ws.handler.{MessageContext, Handler}
#if ($mark-generated == "true")
import javax.annotation.Generated
#end

#foreach ($import in $service.imports)
import ${import}
#end
/**
* This class was generated by $fullversion
* $currentdate
* Generated source version: $version
*
*/
#if ($mark-generated == "true")
@Generated(value = "$generatorclass", date = "$currentdate", comments = "$fullversion")
#end
class ${service.name}(app: play.api.Application) extends play.soap.PlaySoapPlugin(app) {
#foreach ($port in $service.ports)

  #set($portClassName = ${port.interfaceClass})
  #if ($portClassName == ${service.name})
    #set($portClassName = ${port.fullClassName})
  #end

  #if ($mark-generated == "true")
  @Generated(value = "$generatorclass", date = "$currentdate")
  #end
  lazy val $portMethod.transform($port): $portClassName = {
    createPort[$portClassName](new QName("$service.namespace"), "$port.portName", "$port.address")
  }

  #if ($mark-generated == "true")
  @Generated(value = "$generatorclass", date = "$currentdate")
  #end
  def $portMethod.transform($port)(handlers: Handler[_ <: MessageContext]*): $portClassName = {
    createPort[$portClassName](new QName("$service.namespace"), "$port.portName", "$port.address", handlers: _*)
  }
#end
}

#if ($mark-generated == "true")
@Generated(value = "$generatorclass", date = "$currentdate")
#end
object ${service.name} {
#foreach ($port in $service.ports)
  #set($portMethodName = $portMethod.transform($port))
  #set($portClassName = ${port.interfaceClass})
  #if ($portClassName == ${service.name})
    #set($portClassName = ${port.fullClassName})
  #end

  #if ($mark-generated == "true")
  @Generated(value = "$generatorclass", date = "$currentdate")
  #end
  def ${portMethodName}(handlers: Handler[_ <: MessageContext]*)(implicit app: play.api.Application): $portClassName = {
    app.plugin[$service.name] match {
      case Some(plugin) => if (handlers.isEmpty) plugin.$portMethodName else plugin.${portMethodName}(handlers: _*)
      case None => throw new IllegalStateException("Plugin $service.name is not registered")
    }
  }

  #if ($mark-generated == "true")
  @Generated(value = "$generatorclass", date = "$currentdate")
  #end
  def ${portMethodName}(implicit app: play.api.Application): $portClassName = ${portMethodName}()

  #if ($mark-generated == "true")
  @Generated(value = "$generatorclass", date = "$currentdate")
  #end
  @annotation.varargs
  def ${port.methodName}(handlers: Handler[_ <: MessageContext]*): $portClassName = ${portMethodName}(handlers: _*)(play.api.Play.current)
#end
}